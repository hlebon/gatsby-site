webpackJsonp([0xb6e84471c1c3],{399:function(e,t){e.exports={pathContext:{posts:[{html:'<h2>a common day , today</h2>\n<p>Per MDN, the fetch() API only rejects a promise when a “network error is encountered, although this usually means permissions issues or similar.” Basically fetch() will only reject a promise if the user is offline, or some unlikely networking error occurs, such a DNS lookup failure.</p>\n<p>The good is news is fetch provides a simple ok flag that indicates whether an HTTP response’s status code is in the successful range or not. For instance the following code logs “Error: Internal Server Error(…)”:</p>\n<pre><code class="language-javascript">function fancyAlert(arg) {\n  if(arg) {\n    $.facebox({div:\'#foo\'})\n  }\n}\n</code></pre>\n<p>Although I still don’t like fetch()’s lack of rejecting failed HTTP status codes, <a href="https://www.google.com" title="Google&#x27;s Homepage">I\'m an inline-style link with title</a> over time fetch()’s behavior has grown on me—mostly because it gives me more control over how I handle individual problems. Plus, the composable nature of fetch() makes it fairly trivial to manually handle errors without adding a bunch of verbose code.</p>\n<p>Overall I think it’s worth taking few minutes to play with fetch(), even if it’s just to see what you think. It’s certainly a far more readable alternative to XMLHttpRequest. If you happen to be building NativeScript apps, you might not know that you can use fetch() today without any need for a polyfill or fallback. And something about using fetch() to perform HTTP requests in native Android and iOS apps is just plain cool :)</p>',id:"C:/Users/hans8/Documents/GitHub/gatsby-site/src/pages/2017-12-06/index.md absPath of file >>> MarkdownRemark",frontmatter:{id:"1",titleid:"common-day",date:"2017-07-12T17:12:33.962Z",path:"/common-day",title:"Practical Parallelization in C# with MapReduce, ProducerConsumer and ActorModel",excerpt:"The barrier of entry into multi-threading in .NET is relatively low as both Parallel Computing (making programs run faster) and Concurrent Programming (making programs more responsive)",tags:["navidad","blog","cool"],author:"Hans Garcia"}},{html:"<h1>pre mother day, huppi</h1>\n<p>I dont know what to write... </p>",id:"C:/Users/hans8/Documents/GitHub/gatsby-site/src/pages/2017-12-07/index.md absPath of file >>> MarkdownRemark",frontmatter:{id:"2",titleid:"pre-mother-day",date:"2017-08-12T17:12:33.962Z",path:"/pre-mother-day",title:"Stuff Every .NET App Should be Logging at Startup",excerpt:"C# 7 has introduced a number of features which you can explore HERE; In this article we are going to take a look at Local Functions",tags:["navidad","blog","cool"],author:"Hans Garcia"}}],tagName:"navidad"}}}});
//# sourceMappingURL=path---tags-navidad-321994b2c152f85e68f9.js.map